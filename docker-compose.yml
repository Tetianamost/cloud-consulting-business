version: '3.8'

services:
  # Backend service with Bedrock integration
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8061:8061"
    environment:
      - PORT=8061
      - LOG_LEVEL=4
      - GIN_MODE=debug
      - CORS_ALLOWED_ORIGINS=http://localhost:3006,http://frontend
      # Bedrock configuration - set these in .env file
      - AWS_BEARER_TOKEN_BEDROCK=${AWS_BEARER_TOKEN_BEDROCK}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN:-}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - BEDROCK_REGION=${BEDROCK_REGION:-us-east-1}
      - BEDROCK_MODEL_ID=${BEDROCK_MODEL_ID:-amazon.nova-lite-v1:0}
      - BEDROCK_BASE_URL=${BEDROCK_BASE_URL:-https://bedrock-runtime.us-east-1.amazonaws.com}
      - BEDROCK_TIMEOUT_SECONDS=${BEDROCK_TIMEOUT_SECONDS:-30}
    volumes:
      # Mount for development (optional - remove for production)
      - ./backend:/app
    networks:
      - consulting-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8061/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3006:80"
    environment:
      - REACT_APP_API_URL=http://localhost:8061
    depends_on:
      - backend
    networks:
      - consulting-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database (optional - for future use)
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: consulting
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - consulting-network
    restart: unless-stopped
    profiles:
      - database

  # Redis cache (optional - for future use)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - consulting-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    profiles:
      - cache

  # Prometheus for metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - consulting-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - consulting-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  consulting-network:
    driver: bridge