package main

import (
	"context"
	"fmt"
	"html/template"
	"log"
	"time"

	"github.com/cloud-consulting/backend/internal/domain"
	"github.com/cloud-consulting/backend/internal/interfaces"
	"github.com/cloud-consulting/backend/internal/services"
)

func main() {
	fmt.Println("=== Enhanced Report Generator Test ===")
	
	// Create test inquiry
	inquiry := &domain.Inquiry{
		ID:       "test-inquiry-enhanced-001",
		Name:     "John Smith",
		Email:    "john.smith@techcorp.com",
		Company:  "TechCorp Healthcare Solutions",
		Phone:    "+1-555-0123",
		Services: []string{"migration", "assessment", "security"},
		Message:  "We need urgent help migrating our healthcare application to the cloud. We have HIPAA compliance requirements and need to ensure patient data security. Can we schedule a meeting this week to discuss our timeline? This is critical for our Q1 launch.",
		Priority: domain.PriorityHigh,
		Status:   domain.InquiryStatusPending,
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}

	fmt.Printf("Testing with inquiry: %s (%s)\n", inquiry.Name, inquiry.Company)
	fmt.Printf("Services requested: %v\n", inquiry.Services)
	fmt.Printf("Message: %s\n\n", inquiry.Message)

	// Test 1: Basic Report Generator (backward compatibility)
	fmt.Println("--- Test 1: Basic Report Generator ---")
	testBasicReportGenerator(inquiry)

	// Test 2: Enhanced Report Generator with all services
	fmt.Println("\n--- Test 2: Enhanced Report Generator ---")
	testEnhancedReportGenerator(inquiry)

	// Test 3: Enhanced Report Generator with partial services
	fmt.Println("\n--- Test 3: Enhanced Report Generator (Partial Services) ---")
	testPartialEnhancedReportGenerator(inquiry)

	fmt.Println("\n=== All Tests Completed ===")
}

func testBasicReportGenerator(inquiry *domain.Inquiry) {
	// Create mock services
	bedrockService := &MockBedrockService{}
	templateService := &MockTemplateService{}
	pdfService := &MockPDFService{}

	// Create basic report generator
	reportGen := services.NewBasicReportGenerator(bedrockService, templateService, pdfService)

	// Generate report
	ctx := context.Background()
	report, err := reportGen.GenerateReport(ctx, inquiry)
	if err != nil {
		log.Printf("Error generating basic report: %v", err)
		return
	}

	fmt.Printf("✓ Basic report generated successfully\n")
	fmt.Printf("  Report ID: %s\n", report.ID)
	fmt.Printf("  Title: %s\n", report.Title)
	fmt.Printf("  Type: %s\n", report.Type)
	fmt.Printf("  Generated by: %s\n", report.GeneratedBy)
	fmt.Printf("  Content length: %d characters\n", len(report.Content))
	
	// Test HTML generation
	htmlContent, err := reportGen.GenerateHTML(ctx, inquiry, report)
	if err != nil {
		log.Printf("Error generating HTML: %v", err)
	} else {
		fmt.Printf("✓ HTML generated successfully (%d characters)\n", len(htmlContent))
	}

	// Test PDF generation
	pdfBytes, err := reportGen.GeneratePDF(ctx, inquiry, report)
	if err != nil {
		log.Printf("Error generating PDF: %v", err)
	} else {
		fmt.Printf("✓ PDF generated successfully (%d bytes)\n", len(pdfBytes))
	}
}

func testEnhancedReportGenerator(inquiry *domain.Inquiry) {
	// Create all mock services
	bedrockService := &MockBedrockService{}
	templateService := &MockTemplateService{}
	pdfService := &MockPDFService{}
	promptArchitect := services.NewPromptArchitect()
	knowledgeBase := services.NewInMemoryKnowledgeBase()
	docLibrary := services.NewDocumentationLibraryService()
	multiCloudAnalyzer := services.NewMultiCloudAnalyzerService(knowledgeBase, docLibrary)
	riskAssessor := services.NewRiskAssessorService(knowledgeBase, docLibrary)

	// Create enhanced report generator
	reportGen := services.NewReportGenerator(
		bedrockService,
		templateService,
		pdfService,
		promptArchitect,
		knowledgeBase,
		multiCloudAnalyzer,
		riskAssessor,
		docLibrary,
	)

	// Generate enhanced report
	ctx := context.Background()
	report, err := reportGen.GenerateReport(ctx, inquiry)
	if err != nil {
		log.Printf("Error generating enhanced report: %v", err)
		return
	}

	fmt.Printf("✓ Enhanced report generated successfully\n")
	fmt.Printf("  Report ID: %s\n", report.ID)
	fmt.Printf("  Title: %s\n", report.Title)
	fmt.Printf("  Type: %s\n", report.Type)
	fmt.Printf("  Generated by: %s\n", report.GeneratedBy)
	fmt.Printf("  Content length: %d characters\n", len(report.Content))

	// Verify enhanced content includes additional context
	if len(report.Content) > 1000 {
		fmt.Printf("✓ Enhanced content appears to include additional context\n")
	}

	// Test HTML generation
	htmlContent, err := reportGen.GenerateHTML(ctx, inquiry, report)
	if err != nil {
		log.Printf("Error generating HTML: %v", err)
	} else {
		fmt.Printf("✓ HTML generated successfully (%d characters)\n", len(htmlContent))
	}

	// Test PDF generation
	pdfBytes, err := reportGen.GeneratePDF(ctx, inquiry, report)
	if err != nil {
		log.Printf("Error generating PDF: %v", err)
	} else {
		fmt.Printf("✓ PDF generated successfully (%d bytes)\n", len(pdfBytes))
	}
}

func testPartialEnhancedReportGenerator(inquiry *domain.Inquiry) {
	// Create only some services to test graceful degradation
	bedrockService := &MockBedrockService{}
	templateService := &MockTemplateService{}
	pdfService := &MockPDFService{}
	promptArchitect := services.NewPromptArchitect()
	knowledgeBase := services.NewInMemoryKnowledgeBase()

	// Create enhanced report generator with partial services
	reportGen := services.NewReportGenerator(
		bedrockService,
		templateService,
		pdfService,
		promptArchitect,
		knowledgeBase,
		nil, // No multi-cloud analyzer
		nil, // No risk assessor
		nil, // No documentation library
	)

	// Generate report
	ctx := context.Background()
	report, err := reportGen.GenerateReport(ctx, inquiry)
	if err != nil {
		log.Printf("Error generating partial enhanced report: %v", err)
		return
	}

	fmt.Printf("✓ Partial enhanced report generated successfully\n")
	fmt.Printf("  Report ID: %s\n", report.ID)
	fmt.Printf("  Title: %s\n", report.Title)
	fmt.Printf("  Generated by: %s\n", report.GeneratedBy)
	fmt.Printf("  Content length: %d characters\n", len(report.Content))
	fmt.Printf("✓ Graceful degradation working - report generated with available services only\n")
}

// Mock implementations for testing

type MockBedrockService struct{}

func (m *MockBedrockService) GenerateText(ctx context.Context, prompt string, options *interfaces.BedrockOptions) (*interfaces.BedrockResponse, error) {
	// Simulate enhanced content based on prompt length
	var content string
	if len(prompt) > 2000 {
		content = `# EXECUTIVE SUMMARY

This enhanced cloud consulting report provides comprehensive recommendations for TechCorp Healthcare Solutions' cloud migration initiative. Based on our analysis, we recommend a phased approach prioritizing HIPAA compliance and security.

**PRIORITY LEVEL: HIGH PRIORITY** - Urgent timeline detected for Q1 launch with immediate meeting request.

## Key Recommendations:
- AWS as primary cloud provider for healthcare workloads
- Multi-AZ deployment for high availability
- Comprehensive encryption strategy for PHI data
- Dedicated VPC with strict network segmentation

# CURRENT STATE ASSESSMENT

Based on the inquiry, TechCorp Healthcare Solutions requires:
- Healthcare application migration to cloud
- HIPAA compliance maintenance
- Patient data security assurance
- Q1 launch timeline support

# RECOMMENDATIONS

## 1. Cloud Provider Selection
**Recommended: Amazon Web Services (AWS)**
- Strong HIPAA compliance support with BAA
- Comprehensive healthcare-specific services
- Robust security and encryption capabilities

## 2. Security and Compliance
- Implement AWS HealthLake for FHIR compliance
- Enable comprehensive audit logging
- Deploy AWS Security Hub for continuous monitoring
- Establish dedicated tenancy for sensitive workloads

## 3. Risk Mitigation
**OVERALL RISK LEVEL: MEDIUM**

**KEY TECHNICAL RISKS:**
- Data migration complexity (medium impact)
- Application compatibility issues (medium impact)

**KEY SECURITY RISKS:**
- PHI data exposure during migration (high impact)
- Inadequate access controls (high impact)

**RECOMMENDED RISK MITIGATION ACTIONS:**
- Implement end-to-end encryption for all data transfers
- Establish comprehensive backup and recovery procedures
- Deploy multi-factor authentication for all access

# MULTI-CLOUD ANALYSIS

**RECOMMENDED CLOUD PROVIDER: AWS**

**REASONING:**
- Superior healthcare compliance support
- Comprehensive security services portfolio
- Strong track record with healthcare organizations

**ALTERNATIVE OPTIONS:** Azure, GCP

**COST IMPLICATIONS:** Estimated 15-20% premium for healthcare-specific compliance features

# DOCUMENTATION REFERENCES

**BEST PRACTICES DOCUMENTATION:**
- AWS Well-Architected Framework: https://docs.aws.amazon.com/wellarchitected/
- AWS Security Best Practices: https://docs.aws.amazon.com/security/
- HIPAA Compliance Guide: https://aws.amazon.com/compliance/hipaa-compliance/

# NEXT STEPS

1. **IMMEDIATE ACTIONS (This Week)**
   - Schedule discovery workshop
   - Conduct current state assessment
   - Begin compliance gap analysis

2. **SHORT TERM (2-4 Weeks)**
   - Finalize architecture design
   - Establish AWS environment
   - Begin pilot migration

**MEETING SCHEDULING:** Client requested meeting this week - recommend scheduling within 48 hours given Q1 launch criticality.

# URGENCY ASSESSMENT

**Urgent language detected:** "urgent help", "critical for our Q1 launch"
**Requested meeting timeframes:** "this week"
**Recommended response timeline:** Within 24 hours
**Specific dates/times mentioned:** Q1 launch deadline

# CONTACT INFORMATION

- Client: John Smith (john.smith@techcorp.com)
- Company: TechCorp Healthcare Solutions
- Phone: +1-555-0123`
	} else {
		content = `# EXECUTIVE SUMMARY

This consulting report provides recommendations for TechCorp Healthcare Solutions' cloud migration initiative.

**PRIORITY LEVEL: HIGH PRIORITY** - Urgent timeline detected with meeting request.

# CURRENT STATE ASSESSMENT

TechCorp Healthcare Solutions requires cloud migration with HIPAA compliance for Q1 launch.

# RECOMMENDATIONS

1. Prioritize HIPAA-compliant cloud architecture
2. Implement comprehensive security controls
3. Plan phased migration approach

# NEXT STEPS

- Schedule immediate discovery meeting
- Conduct compliance assessment
- Develop migration timeline

**MEETING SCHEDULING:** Client requested meeting this week for Q1 launch timeline.

# CONTACT INFORMATION

- Client: John Smith (john.smith@techcorp.com)
- Company: TechCorp Healthcare Solutions
- Phone: +1-555-0123`
	}

	return &interfaces.BedrockResponse{
		Content: content,
		Usage: interfaces.BedrockUsage{
			InputTokens:  len(prompt) / 4, // Rough estimate
			OutputTokens: len(content) / 4,
		},
		Metadata: map[string]string{
			"model": options.ModelID,
		},
	}, nil
}

func (m *MockBedrockService) GetModelInfo() interfaces.BedrockModelInfo {
	return interfaces.BedrockModelInfo{
		ModelID:     "amazon.nova-lite-v1:0",
		ModelName:   "Nova Lite",
		Provider:    "Amazon",
		MaxTokens:   4000,
		IsAvailable: true,
	}
}

func (m *MockBedrockService) IsHealthy() bool {
	return true
}

type MockTemplateService struct{}

func (m *MockTemplateService) RenderReportTemplate(ctx context.Context, templateName string, data interface{}) (string, error) {
	return fmt.Sprintf(`<!DOCTYPE html>
<html>
<head>
    <title>Cloud Consulting Report</title>
    <style>
        .section-header { color: #2c3e50; margin-top: 2em; }
        .subsection-header { color: #34495e; margin-top: 1.5em; }
        .report-list { margin: 1em 0; }
        .report-paragraph { margin: 1em 0; line-height: 1.6; }
    </style>
</head>
<body>
    <h1>Enhanced Cloud Consulting Report</h1>
    <div class="report-content">%s</div>
</body>
</html>`, data), nil
}

func (m *MockTemplateService) RenderEmailTemplate(ctx context.Context, templateName string, data interface{}) (string, error) {
	return "Mock email template", nil
}

func (m *MockTemplateService) LoadTemplate(templateName string) (*template.Template, error) {
	return nil, fmt.Errorf("not implemented")
}

func (m *MockTemplateService) ValidateTemplate(templateContent string) error {
	return nil
}

func (m *MockTemplateService) GetAvailableTemplates() []string {
	return []string{"assessment", "migration", "optimization", "architecture"}
}

func (m *MockTemplateService) ReloadTemplates() error {
	return nil
}

func (m *MockTemplateService) PrepareReportTemplateData(inquiry *domain.Inquiry, report *domain.Report) interface{} {
	return map[string]interface{}{
		"Title":       report.Title,
		"ClientName":  inquiry.Name,
		"ClientEmail": inquiry.Email,
		"Content":     report.Content,
	}
}

func (m *MockTemplateService) PrepareConsultantNotificationData(inquiry *domain.Inquiry, report *domain.Report, isHighPriority bool) interface{} {
	return map[string]interface{}{
		"ClientName":     inquiry.Name,
		"IsHighPriority": isHighPriority,
	}
}

type MockPDFService struct{}

func (m *MockPDFService) GeneratePDF(ctx context.Context, htmlContent string, options *interfaces.PDFOptions) ([]byte, error) {
	// Return mock PDF bytes
	mockPDF := fmt.Sprintf("%%PDF-1.4\nMock PDF content for report\nHTML length: %d\nGenerated at: %s", 
		len(htmlContent), time.Now().Format(time.RFC3339))
	return []byte(mockPDF), nil
}

func (m *MockPDFService) GeneratePDFFromURL(ctx context.Context, url string, options *interfaces.PDFOptions) ([]byte, error) {
	return []byte("Mock PDF from URL"), nil
}

func (m *MockPDFService) IsHealthy() bool {
	return true
}

func (m *MockPDFService) GetVersion() string {
	return "mock-1.0.0"
}