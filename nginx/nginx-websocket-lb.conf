# Advanced Nginx configuration for AI Consultant Live Chat System
# Optimized for WebSocket load balancing and high availability

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Optimize worker connections
events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
    accept_mutex off;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format with WebSocket information
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time" '
                    'ws_upgrade="$http_upgrade" ws_connection="$http_connection"';

    access_log /var/log/nginx/access.log main;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    client_max_body_size 10M;
    client_body_timeout 60s;
    client_header_timeout 60s;
    send_timeout 60s;

    # Buffer sizes
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    output_buffers 1 32k;
    postpone_output 1460;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=websocket:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=perip:10m;
    limit_conn_zone $server_name zone=perserver:10m;

    # WebSocket connection mapping
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # Upstream backend servers with load balancing
    upstream backend_chat {
        # Load balancing method
        least_conn;
        
        # Backend servers
        server backend-chat-1:8061 max_fails=3 fail_timeout=30s weight=1;
        server backend-chat-2:8061 max_fails=3 fail_timeout=30s weight=1;
        server backend-chat-3:8061 max_fails=3 fail_timeout=30s weight=1 backup;
        
        # Connection pooling
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    # Upstream frontend servers
    upstream frontend_chat {
        least_conn;
        
        server frontend-chat-1:80 max_fails=3 fail_timeout=30s weight=1;
        server frontend-chat-2:80 max_fails=3 fail_timeout=30s weight=1;
        
        keepalive 16;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    # SSL configuration (if certificates are available)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;

    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; connect-src 'self' ws: wss:;" always;

    # Main server block
    server {
        listen 80;
        listen [::]:80;
        server_name chat.example.com;

        # Redirect HTTP to HTTPS
        return 301 https://$server_name$request_uri;
    }

    # HTTPS server block
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name chat.example.com;

        # SSL certificate configuration
        # ssl_certificate /etc/nginx/ssl/cert.pem;
        # ssl_certificate_key /etc/nginx/ssl/key.pem;

        # Connection limits
        limit_conn perip 20;
        limit_conn perserver 1000;

        # Health check endpoint (no rate limiting)
        location = /health {
            access_log off;
            proxy_pass http://backend_chat;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }

        # WebSocket endpoint for chat with sticky sessions
        location /api/v1/admin/chat/ws {
            # Rate limiting for WebSocket connections
            limit_req zone=websocket burst=5 nodelay;
            
            # Proxy to backend with WebSocket support
            proxy_pass http://backend_chat;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            proxy_set_header Origin $http_origin;
            
            # WebSocket specific timeouts
            proxy_read_timeout 86400s;
            proxy_send_timeout 86400s;
            proxy_connect_timeout 60s;
            
            # Disable buffering for WebSocket
            proxy_buffering off;
            proxy_cache off;
            proxy_request_buffering off;
            
            # Sticky sessions for WebSocket (using IP hash)
            proxy_set_header X-Session-ID $remote_addr;
            
            # WebSocket keep-alive
            proxy_set_header Connection "upgrade";
            proxy_set_header Upgrade $http_upgrade;
        }

        # Authentication endpoints with stricter rate limiting
        location ~ ^/api/v1/admin/(login|auth) {
            limit_req zone=auth burst=3 nodelay;
            
            proxy_pass http://backend_chat;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Connection "";
            
            # Security headers for auth endpoints
            add_header X-Frame-Options DENY;
            add_header X-Content-Type-Options nosniff;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # API endpoints with rate limiting
        location /api/ {
            limit_req zone=api burst=50 nodelay;
            
            proxy_pass http://backend_chat;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Connection "";
            
            # API timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffering for API requests
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            
            # Enable caching for GET requests
            proxy_cache_methods GET HEAD;
            proxy_cache_valid 200 302 10m;
            proxy_cache_valid 404 1m;
        }

        # Frontend static files with caching
        location / {
            proxy_pass http://frontend_chat;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Connection "";
            
            # Caching for static assets
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                proxy_pass http://frontend_chat;
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header Vary Accept-Encoding;
                
                # Compression for static files
                gzip_static on;
            }
            
            # HTML files with shorter cache
            location ~* \.(html|htm)$ {
                proxy_pass http://frontend_chat;
                expires 1h;
                add_header Cache-Control "public, must-revalidate";
            }
        }

        # Metrics endpoint (protected)
        location /metrics {
            # Allow only from monitoring networks
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            
            proxy_pass http://backend_chat;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # Nginx status endpoint (protected)
        location /nginx_status {
            stub_status on;
            access_log off;
            
            # Allow only from monitoring networks
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }
        
        location = /404.html {
            root /usr/share/nginx/html;
        }

        # Security: Block access to hidden files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Security: Block access to backup files
        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }
    }

    # Upstream health check server (if using nginx-plus)
    # server {
    #     listen 8080;
    #     location /status {
    #         status;
    #         status_format json;
    #     }
    # }
}